Josh:
could use Hugo for static site

Or, FastAPI, NodeJS & POstgres
Or, Django, create html templates (could be more work later to bring in interactivity)

Hybrid approach:
Svelt-kit (in-between: server and frontend in one)
Next.js, nuxt (equivalent versions for react and vue)

If I don't want a framework:
Could use vanilla javascript, Django templates
-write a bunch of html
-javascript files would use vanilla javascript to do dynamic things
-- (or, vanilla javascript with modules - component structure, usually offered by frameworks, with vanilla web components)
-- modules: lit (lets you write pretty functional components in normal javascript)
Structure
database
backend
frontend (vanilla javascipt)
+ intake procedure for submissions - can use password-protected page.

Security - should think about database security. database hacking is common these days
- user account to use with database, with permissions only to do certain things, and meaty password

To set up Django project
- make project folder: django-admin startproject recipes (Depends on: django)
Install django with pip, not pacman, so we can use virtual env.
-- python -m venv env; source env/bin/activate; pip install django
Set up postgres databse with docker (can now use docker-compose file)
-- put docker-compose.yml template file in project, specifying default databse name (recipes_dev)
- Run docker server (docker.service) (depends on: docker)
- sudo docker-compose up (depends on: docker-compose)
- (whenever you start developing, run docker-compose-up)
- (when we deploy, need a separate database like recipes_production)
Hook up postgres database to django
- open recipes/settings.py
- in Databases, set to match docker-compose.yml
Make migrations
- install psycopg2
- python manage.py makemigrations
- This should create a migrations folder (it didn't - maybe only if there are changes?)
- Every time we change the database, need to run python manage.py migrate
- create admin account to manage database (can be same username as default)

Concepts of Django
Model-View-Controller (MVC) style of framework
models are models of files that have data you want to store. e.g., recipe, tag
inside a model, model what you want the data to look like
specificy (basically) a python class with properties that represent columns in the database
django will automatically populate the postgres databse with columns according to your models

todo: go through django tutorial: https://docs.djangoproject.com/en/4.1/intro/tutorial01/
then, we can set up lit.


Working through Tutorial


Questions for Josh
1. What is include() doing? what valid paths are captured by include('polls.urls')? Is this safe?
2. How can I preview/inspect the databases?
2. Why is there pk and id? When do they diverge?
3. Why isn't the namespace for templates linked to the app name? (Why do we need a subdirectory with the app namespace?)
4. When would you use request.GET?
4. When I import "F" from django.models, localhost refuses to connect. why?
  https://docs.djangoproject.com/en/4.1/ref/models/expressions/#avoiding-race-conditions-using-f
Why does coverage run --source='.' manage.py test myapp
give the erorr django.core.exceptions.ImproperlyConfigured: Error loading psycopg2 module: No module named 'psycopg2'
when psychopg2 is installed in the venv?


Step-by-step guide
Dependencies (system-wide): docker, python3, django
Dependencies (project python venv): django, psycopg2
Recommended (project python venv): pylint, redgreenunittest

To create project:
1. Create project directory
- django-admin startproject base (use "base" instead of project name to avoid django's default of nesting a directory with the same name, and allow hyphens in project name)
- rename project directory to [project name]
2. In project directory, set up python virtual environment and install django
- python3 -m venv env (Create venv)
- source env/bin/activate (Activate venv)
- pip install django (Install django in venv)
- Also install linters, + (pip install pylint; pip install
3. Create project files
- django-admin startproject base (Or: django-admin startproject [project name]/app/config)
4. Set up postgres database with docker-compose
- Put docker-compose.yml template file in project directory, specifying default database name (e.g., postgres_dev) (Template: https://gist.github.com/opmorgan/155c8b8ee8a6a68247bad2829800c4ec)
- Run docker.service (depends on: docker)
- sudo docker-compose up (compose database; keep this process running while developing)
- (Later, will need to set upo separate production database)
5. Hook up postgres database to django
- open base/settings.py
- set DATABASES to match docker-compose.yml (Template: https://gist.github.com/opmorgan/aac753bf769b14b5c4a9ff4b14f2c660)
6. Run server in venv
- python manage.py runserver
7. Preview site in browser at localhost:8000 (port specified in manage.py)

Install linters (if not built-in to IDE) and test-output colorizer, in venv.
- pip install redgreenunittest
- pip install pylint
- In base/settings.py, add: TEST_RUNNER="redgreenunittest.django.runner.RedGreenDiscoverRunner"

To set up testing environment, for existing project:
1. sudo docker compose up (Run the docker container)
2. source env/bin/activate (Enter python virutal environment)
3. python manage.py runserver
4. Preview site in browser at localhost:8000

To make model changes and migrations:
1. Change models (models.py)
2. Run python manage.py makemigrations to create migrations for those changes
3. Run python manage.py migrate to apply those changes to the database.
(4. Commit migrations to vc)




